FileInputStream AND FileOutputStream 传入的每个文件对象每次都会重新创建
这是关于追加与覆盖的问题

			

只有FileOutputStream才需要分清追加和覆盖的问题，因为这是写操作嘛，读操作就没有这个必要了。当constructor里的第二个参数是true时，表示追加操作，默认是false，也就是覆盖操作。
默认是false的话，底层是这样判断的，如果文件不存在，则创建文件，如果存在，则删除后再创建

读写要分离，当你要执行读操作的时候，如下操作什么都读不了,因为new了一个相同参数file的FileOutputStream，所以file文件会直接清空，除非你这样写FileOutputStream fos = new FileOutputStream(file, true)
		fos = new FileOutputStream(file);
		fis = new FileInputStream(file);
		InputStreamReader reader = new InputStreamReader(fis, "unicode");
		
		StringBuffer strBuff = new StringBuffer();
		char[] buff = new char[64];
		int count = 0;
		while ((count = reader.read(buff)) != -1) {
			strBuff.append(buff, 0, count);
		}
		System.out.println(strBuff);



  Java IO一般包含两个部分：1.java.io包中堵塞型IO；2.java.nio包中的非堵塞型IO，通常称为New IO。
	学完IO就学Adapter和Decorator模式KO?


流就是一维单向的。单向就是只可以一个方向（按顺序从头至尾依次）读取，不可以读到某个位置，再返回前面某个位置。所以RandomAccessFile就是为了解决这个问题而生。

关于InputStream AND OutputStream, 只要理解以下六个方法，写起程序来就会相对容易些，分别是
in.read()
in.read(byte[] b)
int.read(byte b[], int off, int len)
以上三个读的方法返回的都是int类型，后两个表示读到的字节数，第一个表示读到的字节

out.write(int b)
out.write(byte[] b)
out.write(byte b[], int off, int len)
以上三个方法返回值为void，需要比较小心的是out.write(int b)只写b的低八位到流中，虽然int有4字节，32位，其他的高24位也会被舍弃










